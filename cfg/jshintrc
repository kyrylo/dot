// http://www.jshint.com/docs/options/
{
  // This option defines globals exposed by modern browsers: all the way from
  // good old document and navigator to the HTML5 FileReader and other new
  // developments in the browser world.
  // Note: This option doesn't expose variables like alert or console. See
  // option devel for more information. http://www.jshint.com/docs/options/#devel
  "browser": true,

  "jquery": true,

  // This options prohibits the use of == and != in favor of === and !==. The
  // former try to coerce values before comparing them which can lead to some
  // unexpected results. The latter don't do any coercion so they are generally
  // safer.
  "eqeqeq": true,

  // This option prohibits the use of a variable before it was
  // defined. JavaScript has function scope only and, in addition to that, all
  // variables are always moved—or hoisted— to the top of the function. This
  // behavior can lead to some very nasty bugs and that's why it is safer to
  // always use variable only after they have been explicitly defined.
  //
  // Setting this option to "nofunc" will allow function declarations to be
  // ignored.
  "latedef": "nofunc",

  // This option requires you to capitalize names of constructor
  // functions. Capitalizing functions that are intended to be used with new
  // operator is just a convention that helps programmers to visually
  // distinguish constructor functions from other types of functions to help
  // spot mistakes when using this.
  //
  // Not doing so won't break your code in any browsers or environments but it
  // will be a bit harder to figure out—by reading the code—if the function was
  // supposed to be used with or without new. And this is important because when
  // the function that was intended to be used with new is used without it, this
  // will point to the global object instead of a new object.
  "newcap": true,

  // This option enforces the consistency of quotation marks used throughout
  // your code. It accepts three values: true if you don't want to enforce one
  // particular style but want some consistency, "single" if you want to allow
  // only single quotes and "double" if you want to allow only double quotes.
  "quotmark": true,

  // This option prohibits the use of explicitly undeclared variables. This
  // option is very useful for spotting leaking and mistyped variables.
  "undef": true,

  // This option warns when you define and never use your variables. It is very
  // useful for general code cleanup, especially when used in addition to undef.
  "unused": true,

  // This option lets you set the max number of formal parameters allowed per
  // function.
  "maxparams": 3,

  // This option lets you control how nested do you want your blocks to be.
  "maxdepth": 3,

  // This option suppresses warnings about the debugger statements in your code.
  "debug": true,

  // This option suppresses warnings about == null comparisons. Such comparisons
  // are often useful when you want to check if a variable is null or undefined.
  "eqnull": true,

  // This option suppresses warnings about functions inside of loops.
  "loopfunc": true,

  // This option disallows the use of dangling _ in variables.
  "nomen": false,

  // This option prohibits the use of constructor functions for
  // side-effects. Some people like to call constructor functions without
  // assigning its result to any variable:
  //
  //     new MyConstructor();
  //
  // There is no advantage in this approach over simply calling MyConstructor
  // since the object that the operator new creates isn't used anywhere so you
  // should generally avoid constructors like this one.
  "nonew": true,

  "globals": {
    "Ext": false
  }
}
